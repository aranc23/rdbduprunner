#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# import sys
import json
import datetime

factory_settings["rdbduprunner_default_levels"] = {
    "age": (86400, 172800)  # 1d/2d
}


def join_space(n):
    return " ".join(n)


def join_newline(n):
    return "\n".join(n)


def inventory_rdbduprunner(info):
    inventory = {}
    big_string = ''
    for line in info:
        big_string += " ".join(line)
    try:
        r_status = json.loads(big_string)
    except json.JSONDecodeError:
        yield 3, 'rdbduprunner status data is not valid json'
        return

    for src in r_status.keys():
        inventory[(src, "rdbduprunner_default_levels")] = 1
    return inventory.keys()


def check_rdbduprunner(item, params, info):
    big_string = ''
    for line in info:
        big_string += " ".join(line)

    try:
        r_status = json.loads(big_string)
    except json.JSONDecodeError:
        yield 3, 'rdbduprunner status data is not valid json'
        return

    last = {}
    # sys.stderr.write("%s %d\n" % (item,len(info)))
    warn, crit = params['age']
    # counter = 0

    if item not in r_status.keys():
        yield 3, 'rdbduprunner status entry not found in plugin output'
        return

    for k in ('time', 'exit', 'errno', 'phase'):
        if k not in r_status[item]:
            yield 3, "missing elements in status database"
            return

    return_code = 0
    ts = r_status[item]['time']
    dt = datetime.datetime.fromtimestamp(ts)
    msg = 'successful backup found completed at %s' % (dt)
    if r_status[item]['exit'] == 24:
        msg = msg + ' (%s)' % (r_status[item]['errno'])
    elif r_status[item]['exit'] != 0:
        return_code = 2
        msg = 'exited with error in %s phase %d: %s at %s' % (r_status[item]['phase'], r_status[item]['exit'], r_status[item]['errno'], dt)
    elif ts + crit <= time.time():
        return_code = 2
        msg = 'backup is older than %.1f days, last backup at %s' % (crit/86400, dt)
    elif ts + warn <= time.time():
        return_code = 1
        msg = 'backup is older than %.1f days, last backup at %s' % (warn/86400, dt)
    if 'runtime' in last.keys():
        perfdata = ['runtime', r_status[item]['runtime']]
    else:
        perfdata = ['runtime', None]
    yield return_code, msg


check_info['rdbduprunner'] = {
    "check_function"          : check_rdbduprunner,
    "inventory_function"      : inventory_rdbduprunner,
    "default_levels_variable" : "rdbduprunner_default_levels",
    "service_description"     : "Backup %s",
    "has_perfdata"            : False,
    'group'                   : 'backup_rdbduprunner',
}
