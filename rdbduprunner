#! /usr/bin/perl
# Copyright Aran Cox <arancox@gmail.com>

use strict;
use warnings;
use Getopt::Long;
use Fcntl qw(:DEFAULT :flock); # import LOCK_* constants
use Env qw( HOME );
use Config::General;
use Data::Dumper;
use Log::Dispatch;
use Log::Dispatch::Syslog;
use Log::Dispatch::Screen;

# staticly defined

# all of these are overridden via the command line
our $TEST=1;
our $STATS=1;
our $VERBOSITY;
our $TVERBOSITY;
our $LOCALHOST;
our $DUPLICITY_BINARY;
our $RDIFF_BACKUP_BINARY;
# the next three options limit which backups get acted upon
our $PATH;
our $DEST;
our $HOST;
our $FORCE=0;
our $CONFIG_FILE="$HOME/.rdbduprunner.rc";
our $CLEANUP=0;
our $FULL=0;
our $STATUS=0;
our $TIDY=0;
our $DUMP=0;
our $MAXAGE;
our $LOCK_FILE;
our $LOG_LEVEL='info';
our $FACILITY='user';
our $EXCLUDE_PATH;

# global variables
our %CONFIG;
our @BACKUPS;
our $DISPATCHER;

GetOptions('test!'          => \$TEST,
	   'stats!'         => \$STATS,
           'verbosity=i'    => \$VERBOSITY,
           'v|terminal-verbosity=i' => \$TVERBOSITY,
           'localhost=s'    => \$LOCALHOST,
           'duplicity-binary=s' => \$DUPLICITY_BINARY,
           'rdiff-backup-binary=s' => \$RDIFF_BACKUP_BINARY,
           'path=s'                => \$PATH,
           'dest=s'                => \$DEST,
           'host=s'                => \$HOST,
           'force!'                => \$FORCE,
	   'config=s'       => \$CONFIG_FILE, # config file
	   'cleanup'        => \$CLEANUP,
       'check'          => \$CLEANUP,
	   'full'           => \$FULL,
	   'status'         => \$STATUS,
	   'tidy'           => \$TIDY,
	   'dump'           => \$DUMP,
	   'maxage=s'       => \$MAXAGE,
	   'lockfile=s'     => \$LOCK_FILE,
	   'level=s'        => \$LOG_LEVEL,
	   'facility=s'     => \$FACILITY,
	   'exclude-path=s' => \$EXCLUDE_PATH,
          );

if(not defined $LOCALHOST) {
  if(defined $CONFIG{localhost}) {
    $LOCALHOST=$CONFIG{localhost};
  } else {
    $LOCALHOST=`hostname`;
    chomp $LOCALHOST;
    my @a=split(/\./,$LOCALHOST);
    @a > 1 and $LOCALHOST=$a[0];
  }
}

create_dispatcher();
info('starting');

%CONFIG=new Config::General(-ConfigFile => $CONFIG_FILE,
			    -UseApacheInclude => 1,
			    -AutoTrue => 1,
			    -LowerCaseNames => 1)->getall() or die "unable to parse $CONFIG_FILE";

if(not defined $DUPLICITY_BINARY) {
    if(defined $CONFIG{duplicitybinary}) {
	$DUPLICITY_BINARY=$CONFIG{duplicitybinary};
    } else {
	$DUPLICITY_BINARY='duplicity'; # in our path we hope
    }
}

if(not defined $RDIFF_BACKUP_BINARY) {
    if(defined $CONFIG{rdiffbackupbinary}) {
	$RDIFF_BACKUP_BINARY=$CONFIG{rdiffbackupbinary};
    } else {
	$RDIFF_BACKUP_BINARY='rdiff-backup'; # in our path we hope
    }
}

unless(defined $VERBOSITY) { # from the command line
  if(defined $CONFIG{verbosity}) {
    $VERBOSITY=$CONFIG{verbosity};
  }
}

unless(defined $TVERBOSITY) { # from the command line
  if(defined $CONFIG{terminalverbosity}) {
    $TVERBOSITY=$CONFIG{terminalverbosity};
  }
}

if(defined $LOCK_FILE) {
  # leave it alone, it comes from the command line
} elsif(defined $CONFIG{lockfile}) {
  $LOCK_FILE=$CONFIG{lockfile};
} else {
  $LOCK_FILE="$HOME/rdbduprunner.pid";
}

if(defined $EXCLUDE_PATH) {
  # leave it alone, it comes from the command line
} elsif(defined $CONFIG{excludepath}) {
  $EXCLUDE_PATH=$CONFIG{excludepath};
} else {
  $EXCLUDE_PATH='/etc/rdbduprunner-excludes';
}

foreach my $bstag (keys(%{$CONFIG{backupset}})) {
    my $bs=$CONFIG{backupset}{$bstag};
    my $host=(defined $$bs{host} ? $$bs{host} : $LOCALHOST);
    my $btype;
    my $backupdest;

    if(defined $HOST and $host !~ /$HOST/) {
      next;
    }

    if(defined $$bs{backupdestination}) {
        $backupdest=$$bs{backupdestination};
    } elsif(defined $CONFIG{defaultbackupdestination}) {
        $backupdest=$CONFIG{defaultbackupdestination};
    }
    unless(defined $backupdest) {
        error("there is no BackupDestination defined for the BackupSet ($bstag): so it cannot be processed");
        next;
    }
    if(defined $CONFIG{backupdestination}{$backupdest}{type} and
           $CONFIG{backupdestination}{$backupdest}{type} =~ /^(rdiff\-backup|duplicity)$/) {
      # check to make sure that if the type isn't set, we set it to duplicity
      $btype=$CONFIG{backupdestination}{$backupdest}{type};
    } else {
      $btype='duplicity';
    }
    if($btype eq 'duplicity' and $host ne $LOCALHOST) {
      error("$bstag is a duplicity backup with host set to $host: duplicity backups must have a local source!");
      next;
    }

    if(defined $DEST and $backupdest !~ /$DEST/) {
        next;
    }
    my $backupdestpath=$CONFIG{backupdestination}{$backupdest}{path};

    foreach my $path (ref($$bs{path}) eq "ARRAY" ? @{$$bs{path}} : ($$bs{path})) {
        my $bh={};
        if(defined $PATH and $path !~ /$PATH/) {
            next;
        }
        my $dest;
        my $tag='';
        if(defined $$bs{tag}) {
            $dest=$$bs{tag};
            $tag=$dest;
        } else {
            $dest=$path;
            $dest =~ s/\//\-/g;
            $dest =~ s/ /_/g;
            $dest eq '-' and $dest='-root';
            $tag=$host.$dest;
        }
        # I should use a perl module here, I guess, not .
        $dest=$backupdestpath.'/'.$tag;
        my @tags=split(/\-/,$tag);

        debug("Host: $host Path: $path Tag: $tag Dest: $dest Root: $backupdestpath");

        $bh={%{$bs}}; # very important to make a copy here
        $$bh{dest}=$dest;
        $$bh{path}=$path;
        $$bh{tag}=$tag;
        $$bh{host}=$host;
        $$bh{backupdestination}=$backupdest;
        $$bh{gtag}='generic-'.$tags[1];
        $$bh{btype}=$btype;

        if( -f $EXCLUDE_PATH.'/exclude-generic' ) {
            push(@{$$bh{excludes}},$EXCLUDE_PATH.'/exclude-generic');
        }

        if( -f $EXCLUDE_PATH.'/exclude-'.$$bh{gtag} ) {
            push(@{$$bh{excludes}},$EXCLUDE_PATH.'/exclude-'.$$bh{gtag});
        }

        if( -f $EXCLUDE_PATH.'/exclude-'.$tag ) {
            push(@{$$bh{excludes}},$EXCLUDE_PATH.'/exclude-'.$tag);
        } else {
            warning("unable to find the exclude file: ".$EXCLUDE_PATH.'/exclude-'.$tag." for backup $tag");
        }

        if(defined $MAXAGE) {
            $$bh{maxage}=$MAXAGE;
        } elsif(not defined $$bh{maxage} and
                defined $CONFIG{maxage}) {
            $$bh{maxage}=$CONFIG{maxage};
        } else {
            $$bh{maxage}='60D';
        }
        # if this is defined in a backupset, allow that to override the global definition, if it exists
        foreach my $var (sort(map(lc,qw( GPGPassPhrase AWSAccessKeyID AWSSecretAccessKey SignKey EncryptKey )))) {
            unless(defined $$bh{$var}) {
                if(defined $CONFIG{$var}) {
                    $$bh{$var}=$CONFIG{$var};
                }
                if(defined $CONFIG{backupdestination}{$$bh{backupdestination}}{$var}) {
                    # the above is why people hate perl, possibly
                    $$bh{$var}=$CONFIG{backupdestination}{$$bh{backupdestination}}{$var};
                }
            }
        }
        push(@BACKUPS,$bh);
    }
}

if($DUMP) {
  print Dumper \%CONFIG;
  print Dumper \@BACKUPS;
  notice("you asked me to dump and exit!");
  exit(0);
}

if($STATUS) {
    foreach my $bh (sort backup_sort (@BACKUPS)) {

	my @com=($DUPLICITY_BINARY,'collection-status');
    push(@com,verbargs($bh),
         $$bh{dest});
	info(join(" ",@com));
	unless($TEST) {
	    lock_pid_file();
	    set_env($bh);
	    system(@com);
	    unless($? == 0) {
		error("unable to execute duplicity!");
	    }
	    unlock_pid_file();
	}
    }
} elsif($CLEANUP) {
    foreach my $bh (sort backup_sort (@BACKUPS)) {
      my @com;
      if($$bh{btype} eq 'duplicity') {
        push(@com,$DUPLICITY_BINARY,'cleanup');
        if($FORCE) {
          push(@com,'--force');
        }
      } else {
        push(@com,$RDIFF_BACKUP_BINARY,'--check-destination-dir');
      }
    push(@com,verbargs($bh),
         $$bh{dest});
	info(join(" ",@com));
	unless($TEST) {
	    lock_pid_file();
	    set_env($bh);
	    system(@com);
	    unless($? == 0) {
		error("unable to execute $$bh{btype}!");
	    }
	    unlock_pid_file();
	}
    }
} elsif($TIDY) {
    foreach my $bh (sort backup_sort (@BACKUPS)) {
	tidy($bh);
    }
} else { # actually do a backup, please
  BACKUP:
    foreach my $bh (sort backup_sort (@BACKUPS)) {
      my @com;
	if($$bh{disabled}) {
	    # skip disabled backups
	    next;
	}

	if($$bh{btype} eq 'duplicity' and not -d $$bh{path}) {
	  warning("backup path $$bh{path} does not exist for $$bh{tag}: skipping this backup");
	  next BACKUP;
	}

	if(defined $CONFIG{$$bh{backupdestination}}{busted} and $CONFIG{$$bh{backupdestination}}{busted}) {
      # I guess this is a way to mark a backupdestination as unavailable
      next BACKUP;
	}

      if($$bh{btype} eq 'duplicity') {
        @com=($DUPLICITY_BINARY);
        $FULL and push(@com,'full');
        if(defined $$bh{signkey}) {
          push(@com,'--sign-key',$$bh{signkey});
        }
        if(defined $$bh{encryptkey}) {
          push(@com,'--encrypt-key',$$bh{encryptkey});
        }
        unless($STATS) {
          push(@com,'--no-print-statistics');
        }
      } else {
        @com=($RDIFF_BACKUP_BINARY,
              '--exclude-special-files',
             );
        unless($$bh{sshcompress}) {
          push(@com,'--ssh-no-compression');
        }
        if($STATS) {
          push(@com,'--print-statistics');
        }
      }
    push(@com,verbargs($bh),
         '--exclude-other-filesystems');

	foreach my $f (@{$$bh{excludes}}) {
	    push(@com,'--exclude-globbing-filelist',
		 $f);
	}
	# this is fugly:
	push(@com,($$bh{host} eq $LOCALHOST ? $$bh{path} : $$bh{host}.'::'.$$bh{path}),$$bh{dest});

	info(join(" ",@com));

	unless($TEST) {
	    lock_pid_file();

	    if (defined $$bh{prerun}) {
		print $$bh{prerun}."\n";
		set_env($bh);
		system($$bh{prerun});
		unless($? == 0) {
		    error("unable to execute prerun command: skipping backup!");
		    next;
		}
	    }
	    set_env($bh);
	    system(@com);
	    my $mainret=$?;
	    unless($mainret == 0) {
		error("unable to execute $$bh{btype}!");
	    }
	    if(defined $$bh{postrun}) {
		print $$bh{postrun}."\n";
		system($$bh{postrun});
		unless($? == 0) {
		    error("unable to execute postrun command");
		}
		unlock_pid_file();
	    }
	}
    }
}

info('exiting');

sub backup_sort {
    my $aprio=(defined $$a{priority} ? $$a{priority} : 0);
    my $bprio=(defined $$b{priority} ? $$b{priority} : 0);

    if($aprio == $bprio) {
      return $$a{tag} cmp $$b{tag};
    } else {
      return $aprio <=> $bprio;
    }
}

sub lock_pid_file {
    unless(open(LOCK,'+<'.$LOCK_FILE) or open(LOCK,'>'.$LOCK_FILE)) {
	error("unable to open pid file: $LOCK_FILE for writing");
	next;
    }
    unless(flock(LOCK,LOCK_EX|LOCK_NB)) {
	error("unable to flock the pid file: $LOCK_FILE");
	next;
    }
    truncate(LOCK,0); # this shouldn't fail if we have the file opened and locked!
    print LOCK $$."\n"; # who really cares if this fails?
}

sub unlock_pid_file {
    unlink $LOCK_FILE;
    flock(LOCK,LOCK_UN);
    close LOCK;
}

sub tidy {
    my $bh=$_[0];
    my @com=($DUPLICITY_BINARY,
	     'remove-older-than',
	     $$bh{maxage},
	     '--force');
    push(@com,verbargs($bh),
         $$bh{dest});

    info(join(" ",@com));
    unless($TEST) {
	set_env($bh);
	system(@com);
	unless($? == 0) {
	    error("unable to execute duplicity!");
	}
    }
}

sub debug {
  $DISPATCHER->debug(@_);
}
sub info {
  $DISPATCHER->info(@_);
}
sub notice {
  $DISPATCHER->notice(@_);
}
sub warning {
  $DISPATCHER->warning(@_);
}
sub error {
  $DISPATCHER->error(@_);
}
sub critical {
  $DISPATCHER->critical(@_);
}
sub alert {
  $DISPATCHER->alert(@_);
}
sub emergency {
  $DISPATCHER->emergency(@_);
}

sub set_env {
    my $bh=$_[0];
    # grab more stuff from the config and put them into ENV for use by duplicity
    if(defined $$bh{gpgpassphrase}) {
	$ENV{PASSPHRASE}=$$bh{gpgpassphrase};
    }
    if($$bh{dest} =~ /^s3/) {
	if(defined $$bh{awsaccesskeyid}) {
	    $ENV{AWS_ACCESS_KEY_ID}=$$bh{awsaccesskeyid};
	}
	if(defined $$bh{awssecretaccesskey}) {
	    $ENV{AWS_SECRET_ACCESS_KEY}=$$bh{awssecretaccesskey};
	}
    }
}

sub create_dispatcher {
  $DISPATCHER=Log::Dispatch->new;
  $DISPATCHER->add(Log::Dispatch::Syslog->new(name      => 'syslog',
					      min_level => $LOG_LEVEL,
					      ident     => 'rdbduprunner'.'['.$$.']',
					      facility  => $FACILITY,
					      socket    => (`uname` =~ /Linux/ ?
							    'unix' : 'inet'),
					      callbacks => sub { my %t=@_;
								 chomp $t{message};
								 return $t{message};
							       },
					     )
		  );

  $DISPATCHER->add(Log::Dispatch::Screen->new(name      => 'screen',
					      min_level => $LOG_LEVEL,
					      stderr    => 0,
					      callbacks => sub { my %t=@_;
								 chomp $t{message};
								 return $t{message}."\n"; # add a newline
							       },
					     )
		  );


}

sub verbargs {
  my $bh=$_[0];
  my @a;
  if(defined $VERBOSITY) {
    push(@a,'--verbosity',$VERBOSITY);
  }
  if(defined $TVERBOSITY and $$bh{btype} eq 'rdiff-backup') {
    push(@a,'--terminal-verbosity',$TVERBOSITY);
  }
  @a;
}
