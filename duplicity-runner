#! /usr/bin/perl
# Copyright Aran Cox <arancox@gmail.com>

use strict;
use warnings;
use Getopt::Long;
use Fcntl qw(:DEFAULT :flock); # import LOCK_* constants
use Env qw( HOME );
use Config::General;
use Data::Dumper;
use Log::Dispatch;
use Log::Dispatch::Syslog;
use Log::Dispatch::Screen;

our $TEST=1;
our $VERBOSITY=5;
our $LOCALHOST;
our $COMPARE=0;
our $DUPLICITY_BINARY;
our $EXCLUDE_PATH='/etc/rdiff-backup';
our $PATH;
our $DEST;
our $CLEANUP=0;
our $FULL=0;
our $STATUS=0;
our $TIDY=0;
our $DUMP=0;
our $STATS=1;
our $MAXAGE;
our $LOCK_FILE="$HOME/duplicity-runner.pid";
our $DISPATCHER;
our $FACILITY='user';
our $LOG_LEVEL='info';

our $CONFIG_FILE="$HOME/.duplicity-runner.rc";
our %CONFIG;
our @BACKUPS;

GetOptions('test!'          => \$TEST,
	   'stats!'         => \$STATS,
           'verbosity=i'    => \$VERBOSITY,
           'localhost=s'    => \$LOCALHOST,
           'duplicity-binary=s' => \$DUPLICITY_BINARY,
           'compare'        => \$COMPARE,
           'path=s'         => \$PATH,
	   'dest=s'         => \$DEST,
	   'config=s'       => \$CONFIG_FILE, # config file
	   'cleanup'        => \$CLEANUP,
	   'full'           => \$FULL,
	   'status'         => \$STATUS,
	   'tidy'           => \$TIDY,
	   'dump'           => \$DUMP,
	   'maxage=s'       => \$MAXAGE,
	   'lockfile=s'     => \$LOCK_FILE,
	   'level=s'        => \$LOG_LEVEL,
	   'facility=s'     => \$FACILITY,
          );

if(not defined $LOCALHOST) {
  if(defined $CONFIG{localhost}) {
    $LOCALHOST=$CONFIG{localhost};
  } else {
    $LOCALHOST=`hostname`;
    chomp $LOCALHOST;
    my @a=split(/\./,$LOCALHOST);
    @a > 1 and $LOCALHOST=$a[0];
  }
}

$DISPATCHER=Log::Dispatch->new;
$DISPATCHER->add(Log::Dispatch::Syslog->new(name      => 'syslog',
					    min_level => $LOG_LEVEL,
					    ident     => 'duplicity-runner'.'['.$$.']',
					    facility  => $FACILITY,
					    socket    => (`uname` =~ /Linux/ ?
							  'unix' : 'inet'),
					    callbacks => sub { my %t=@_;
							       chomp $t{message};
							       return $t{message};
					    },
		 )
    );

$DISPATCHER->add(Log::Dispatch::Screen->new(name      => 'screen',
					    min_level => $LOG_LEVEL,
					    stderr    => 0,
					    callbacks => sub { my %t=@_;
							       chomp $t{message};
							       return $t{message}."\n"; # add a newline
					    },
		 )
    );


info('starting');

%CONFIG=new Config::General(-ConfigFile => $CONFIG_FILE,
			    -UseApacheInclude => 1,
			    -AutoTrue => 1,
			    -LowerCaseNames => 1)->getall() or die "unable to parse $CONFIG_FILE";

if(not defined $DUPLICITY_BINARY) {
    if(defined $CONFIG{duplicitybinary}) {
	$DUPLICITY_BINARY=$CONFIG{duplicitybinary};
    } else {
	$DUPLICITY_BINARY='duplicity'; # in our path we hope
    }
}
unless(-x $DUPLICITY_BINARY) {
    critical("unable to execute $DUPLICITY_BINARY");
    exit(1);
}

foreach my $bs (values(%{$CONFIG{backupset}})) {
  my $host=$LOCALHOST;

    my $backupdest;
    if(defined $$bs{backupdestination}) {
	$backupdest=$$bs{backupdestination};
    } elsif(defined $CONFIG{defaultbackupdestination}) {
	$backupdest=$CONFIG{defaultbackupdestination};
    }
    unless(defined $backupdest and defined $CONFIG{backupdestination}{$backupdest}) {
      # can't easily verify the existance of all backup destinations without using duplicity itself
	log_and_die("no backup root defined: $backupdest".(defined $CONFIG{backupdestination}{$backupdest}{path} ? " ($CONFIG{backupdestination}{$backupdest}{path})" : ''));
    }
    if(defined $DEST and $backupdest !~ /$DEST/) {
	next;
    }
    my $backupdestpath=$CONFIG{backupdestination}{$backupdest}{path};

    foreach my $path (ref($$bs{path}) eq "ARRAY" ? @{$$bs{path}} : ($$bs{path})) {
      my $bh={};
      if(defined $PATH and $path !~ /$PATH/) {
	  next;
      }
      my $dest;
      my $tag='';
      if(defined $$bs{tag}) {
	  $dest=$$bs{tag};
	  $tag=$dest;
      } else {
	  $dest=$path;
	  $dest =~ s/\//\-/g;
	  $dest =~ s/ /_/g;
	  $dest eq '-' and $dest='-root';
	  $tag=$host.$dest;
      }
      # I should use a perl module here, I guess, not .
      $dest=$backupdestpath.'/'.$tag;
      my @tags=split(/\-/,$tag);

      debug("Host: $host Path: $path Tag: $tag Dest: $dest Root: $backupdestpath");

      $bh={%{$bs}}; # very important to make a copy here
      $$bh{dest}=$dest;
      $$bh{path}=$path;
      $$bh{tag}=$tag;
      $$bh{host}=$host;
      $$bh{backupdestination}=$backupdest;
      $$bh{gtag}='generic-'.$tags[1];

      if( -f $EXCLUDE_PATH.'/exclude-generic' ) {
	push(@{$$bh{excludes}},$EXCLUDE_PATH.'/exclude-generic');
      } else {
	#logentry('warn',"unable to find the exclude file: ".$EXCLUDE_PATH.'/exclude-'.$$bh{gtag}." for backup $tag");
      }

      if( -f $EXCLUDE_PATH.'/exclude-'.$$bh{gtag} ) {
	push(@{$$bh{excludes}},$EXCLUDE_PATH.'/exclude-'.$$bh{gtag});
      } else {
	#logentry('warn',"unable to find the exclude file: ".$EXCLUDE_PATH.'/exclude-'.$$bh{gtag}." for backup $tag");
      }

      if( -f $EXCLUDE_PATH.'/exclude-'.$tag ) {
	push(@{$$bh{excludes}},$EXCLUDE_PATH.'/exclude-'.$tag);
      } else {
	warning("unable to find the exclude file: ".$EXCLUDE_PATH.'/exclude-'.$tag." for backup $tag");
      }
      if(defined $MAXAGE) {
 	  $$bh{maxage}=$MAXAGE;
      } elsif(not defined $$bh{maxage} and
 	      defined $CONFIG{maxage}) {
 	  $$bh{maxage}=$CONFIG{maxage};
      } else {
	  $$bh{maxage}='60D';
      }
      # if this is defined in a backupset, allow that to override the global definition, if it exists
      foreach my $var (sort(map(lc,qw( GPGPassPhrase AWSAccessKeyID AWSSecretAccessKey SignKey EncryptKey )))) {
	unless(defined $$bh{$var}) {
	  if(defined $CONFIG{$var}) {
	    $$bh{$var}=$CONFIG{$var};
	  }
	  if(defined $CONFIG{backupdestination}{$$bh{backupdestination}}{$var}) {
	    # the above is why people hate perl, possibly
	    $$bh{$var}=$CONFIG{backupdestination}{$$bh{backupdestination}}{$var};
	  }
	}
      }
      push(@BACKUPS,$bh);
    }
}

if($DUMP) {
  print Dumper \%CONFIG;
  print Dumper \@BACKUPS;
  notice("you asked me to dump and exit!");
  exit(0);
}

if($STATUS) {
    foreach my $bh (sort backup_sort (@BACKUPS)) {
	my @com=($DUPLICITY_BINARY,'collection-status',
		 '--verbosity',$VERBOSITY,
		 $$bh{dest});
	info(join(" ",@com));
	unless($TEST) {
	    lock_pid_file();
	    set_env($bh);
	    system(@com);
	    unless($? == 0) {
		error("unable to execute duplicity!");
	    }
	    unlock_pid_file();
	}
    }
} elsif($CLEANUP) {
    foreach my $bh (sort backup_sort (@BACKUPS)) {
	my @com=($DUPLICITY_BINARY,'cleanup',
		 '--verbosity',$VERBOSITY,
		 $$bh{dest});
	info(join(" ",@com));
	unless($TEST) {
	    lock_pid_file();
	    set_env($bh);
	    system(@com);
	    unless($? == 0) {
		error("unable to execute duplicity!");
	    }
	    unlock_pid_file();
	}
    }
} elsif($TIDY) {
    foreach my $bh (sort backup_sort (@BACKUPS)) {
	tidy($bh);
    }
} else { # actually do a backup, please
  BACKUP:
    foreach my $bh (sort backup_sort (@BACKUPS)) {
	if($$bh{disabled}) {
	    # skip disabled backups
	    next;
	}

	if(not -d $$bh{path}) {
	  warning("backup path $$bh{path} does not exist: skipping this backup");
	  next BACKUP;
	}

	if(defined $CONFIG{$$bh{backupdestination}}{busted} and $CONFIG{$$bh{backupdestination}}{busted}) {
	    next BACKUP;
	}

	my @com=($DUPLICITY_BINARY);
	$FULL and push(@com,'full');
	push(@com,
	     '--verbosity',$VERBOSITY,
	     '--exclude-other-filesystems',
	    );
	if(defined $$bh{signkey}) {
	  push(@com,'--sign-key',$$bh{signkey});
	}
	if(defined $$bh{encryptkey}) {
	  push(@com,'--encrypt-key',$$bh{encryptkey});
	}

	not $STATS and push(@com,'--no-print-statistics');

	# if($COMPARE) {
	#     push(@com,'--compare');
	# }

	foreach my $f (@{$$bh{excludes}}) {
	    push(@com,'--exclude-globbing-filelist',
		 $f);
	}
	# this is fugly:
	push(@com,$$bh{path},$$bh{dest});

	info(join(" ",@com));

	unless($TEST) {
	    lock_pid_file();

	    if (defined $$bh{prerun}) {
		print $$bh{prerun}."\n";
		set_env($bh);
		system($$bh{prerun});
		unless($? == 0) {
		    error("unable to execute prerun command: skipping backup!");
		    next;
		}
	    }
	    set_env($bh);
	    system(@com);
	    my $mainret=$?;
	    unless($mainret == 0) {
		error("unable to execute duplicity!");
	    }
	    if(defined $$bh{postrun}) {
		print $$bh{postrun}."\n";
		system($$bh{postrun});
		unless($? == 0) {
		    error("unable to execute postrun command");
		}
		unlock_pid_file();
	    }
	}
    }
}

info('exiting');

sub backup_sort {
    my $aprio=(defined $$a{priority} ? $$a{priority} : 0);
    my $bprio=(defined $$b{priority} ? $$b{priority} : 0);

    return $aprio <=> $bprio;
}

#sub find_backup_by_tag {
#    foreach my $hr (@BACKUPS) {
#	if

sub lock_pid_file {
    if(defined $LOCK_FILE) {
	# leave it alone
    } elsif(defined $CONFIG{LockFile}) {
	$LOCK_FILE=$CONFIG{LockFile};
    } else {
	$LOCK_FILE="$HOME/duplicity-runner.pid";
    }
    unless(open(LOCK,'+<'.$LOCK_FILE) or open(LOCK,'>'.$LOCK_FILE)) {
	error("unable to open pid file: $LOCK_FILE for writing");
	next;
    }
    unless(flock(LOCK,LOCK_EX|LOCK_NB)) {
	error("unable to flock the pid file: $LOCK_FILE");
	next;
    }
    truncate(LOCK,0); # this shouldn't fail if we have the file opened and locked!
    print LOCK $$."\n"; # who really cares if this fails?
}

sub unlock_pid_file {
    unlink $LOCK_FILE;
    flock(LOCK,LOCK_UN);
    close LOCK;
}

sub tidy {
    my $bh=$_[0];
    my @com=($DUPLICITY_BINARY,
	     'remove-older-than',
	     $$bh{maxage},
	     '--force',
	     '--verbosity',$VERBOSITY,
	     $$bh{dest}
	);
    info(join(" ",@com));
    unless($TEST) {
	set_env($bh);
	system(@com);
	unless($? == 0) {
	    error("unable to execute duplicity!");
	}
    }
}

sub debug {
  $DISPATCHER->debug(@_);
}
sub info {
  $DISPATCHER->info(@_);
}
sub notice {
  $DISPATCHER->notice(@_);
}
sub warning {
  $DISPATCHER->warning(@_);
}
sub error {
  $DISPATCHER->error(@_);
}
sub critical {
  $DISPATCHER->critical(@_);
}
sub alert {
  $DISPATCHER->alert(@_);
}
sub emergency {
  $DISPATCHER->emergency(@_);
}

sub set_env {
    my $bh=$_[0];
    # grab more stuff from the config and put them into ENV for use by duplicity
    if(defined $$bh{gpgpassphrase}) {
	$ENV{PASSPHRASE}=$$bh{gpgpassphrase};
    }
    if($$bh{dest} =~ /^s3/) {
	if(defined $$bh{awsaccesskeyid}) {
	    $ENV{AWS_ACCESS_KEY_ID}=$$bh{awsaccesskeyid};
	}
	if(defined $$bh{awssecretaccesskey}) {
	    $ENV{AWS_SECRET_ACCESS_KEY}=$$bh{awssecretaccesskey};
	}
    }
}
