#! /usr/bin/perl

use strict;
use warnings;

use Getopt::Long;
use POSIX qw( strftime mktime );
use Data::Dumper;
use YAML;

my $CONFIG_FILE='/etc/zfssnapman.yaml';

my %months=(Jan => 0,
             Feb => 1,
             Mar => 2,
             Apr => 3,
             May => 4,
             Jun => 5,
             Jul => 6,
             Aug => 7,
             Sep => 8,
             Oct => 9,
             Nov => 10,
             Dec => 11,
            );

my $DESTROY=1;
my $SNAP=1;

my %zfs;

GetOptions('snap!'    => \$SNAP,
           'destroy!' => \$DESTROY,
           'config=s' => \$CONFIG_FILE,
          );

foreach my $CONFIG ($CONFIG_FILE,glob('/etc/zfssnapman.d/*.yaml')) {
  -f $CONFIG or next;
  open(C,$CONFIG) or die "unable to open $CONFIG";
  my ($config) = Load(join("",<C>)) or die "unable to load configuration from $CONFIG";
  close(C);

  foreach my $zfs (keys{%{$config}}) { # I love perl!
    $zfs{$zfs}=eval $$config{$zfs};
  }
}

my $time=strftime('%F%T',localtime(time()));
$time =~ s/[\:\-]//g;

while(my ($zfs,$days)=each(%zfs)) {
  if($DESTROY) {
    foreach(`/sbin/zfs list -t snapshot -o name,creation -s creation -r -H $zfs`) {
      chomp;
      my ($snap,$creation)=split(/\t/);
      next unless $snap =~ /^$zfs\@/;
      unless($creation =~ /\s+(\w\w\w)\s+(\d+)\s+(\d+)\:(\d+)\s+(\d\d\d\d)/) {
        die "unable to parse the date: $creation";
      }
      my $age=mktime(0,$4,$3,$2,$months{$1},($5-1900));
      #printf("%s\t%s\t%s\t%d\t%s\n",strftime('%F %T',localtime(time())),$creation,strftime('%F %T',localtime($age)),$days,strftime('%F %T',localtime($age + ($days * 24 * 60 * 60 ))));
      if(time() > ($age + ($days * 24 * 60 * 60 ))) {
        #printf("removing: %s created at %s\n",$snap,strftime('%F %T',localtime($age)));
        system("/sbin/zfs destroy $snap");
        if($? != 0) {
          warn("failed removing: %s created at %s\n",$snap,strftime('%F %T',localtime($age)));
          warn "failed command: /sbin/zfs destroy $snap";
        }
      }
    }
  }
  if($SNAP) {
    my $com="/sbin/zfs snapshot $zfs\@$time";
    system($com);
    if($? != 0) {
      warn "unable to create zfs snapshot for $zfs at $time";
      warn "failed command: $com";
    }
  }
}
