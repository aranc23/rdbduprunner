#! /usr/bin/perl

# $Id: rdiff-backup-runner,v 1.10 2006/11/06 17:02:20 spin Exp $

use strict;
use warnings;
use Getopt::Long;
use logentry;
use File::Temp qw( mkdtemp mkstemp );
use Data::Dumper;

our $TEST=1;
our $VERBOSITY=5;
our $TVERBOSITY=3;
our $LOCALHOST;
our $COMPARE=0;
our $RDIFF_BACKUP='rdiff-backup'; # assume it's in the path
our $BACKUP_ROOT='/mnt/backup/rdiff-backup';
our $EXCLUDE_PATH='/etc/rdiff-backup';
our $PATH;
our $HOST;
our $FORCE=0;
our $REMOVE;
our %INCREMENTS;
our ($VERBOSE,$DEBUG);
our $AVERAGE;
our ($IFILES,$IFILESIZE,$DESTSIZECHANGE);
our $SNAPPV='/dev/md2';
our $SNAPSIZE='1G';
our $LISTOLDEST=0;

GetOptions('test!'          => \$TEST,
           'verbosity=i'    => \$VERBOSITY,
           'terminal-verbosity=i' => \$TVERBOSITY,
           'localhost=s'    => \$LOCALHOST,
           'rdiff-backup=s' => \$RDIFF_BACKUP,
           'backup-root=s'  => \$BACKUP_ROOT,
           'compare'        => \$COMPARE,
           'path=s'         => \$PATH,
           'host=s'         => \$HOST,
           'force!'         => \$FORCE,
           'remove-oldest!' => \$REMOVE,
           'verbose!'       => \$VERBOSE,
           'debug!'         => \$DEBUG,
           'average'        => \$AVERAGE,
           'snappv=s'       => \$SNAPPV,
           'list-oldest'    => \$LISTOLDEST,
          );

if(not defined $LOCALHOST) {
  $LOCALHOST=`hostname`;
  chomp $LOCALHOST;
  my @a=split(/\./,$LOCALHOST);
  @a > 1 and $LOCALHOST=$a[0];
}

our @BACKUPS=({ 'path' => '/', },
              { 'path'  => '/var',
#	        'lvdev' => '/dev/main2/var'
		},
              { 'path' => '/usr',
#	        'lvdev'=> '/dev/main2/usr2'
		},
              { 'path' => '/home',
#	        'lvdev'=> '/dev/main2/home'
		},
              { 'path' => '/home/spin/Maildir',
	        #'lvdev' => '/dev/main2/home'
	      },
              { 'path' => '/home/spin/enlil',
	      },
              { 'path' => '/var/lib/mysql-snap',
                'prerun' => '/usr/local/sbin/rsnap-lvm --pv /dev/md2',
                'postrun' => '/usr/local/sbin/rsnap-lvm --remove',
                'dest' => 'cain-mysql',
              },
              { 'path' => '/diskless' },
#              { 'path' => '/var/log',
		#'lvdev' => '/dev/main2/log',
		# never activate lvdev for this path
#	      },
              { 'path' => '/',
                'host' => 'xbox1', },
              { 'path' => '/diskless/delight',
                'dest' => 'delight-root',
              },
              { 'path' => '/diskless/delight/usr',
                'dest' => 'delight-usr',
              },
              { 'path' => '/diskless/delight/var',
                'dest' => 'delight-var',
              },
              { 'path' => '/diskless/delight/home',
                'dest' => 'delight-home',
              },
              { 'path' => '/diskless/xbox1/home',
                'dest' => 'xbox1-home',
              },
              { 'root' => '/home/spin/rdiff-backup',
                'host' => 'benway',
                'path' => '/home',
		'compress' => 1,
              },
              { 'root' => '/home/spin/rdiff-backup',
                'host' => 'male',
                'path' => '/home/acox',
		'compress' => 1,
              },
              { 'root' => '/home/spin/rdiff-backup',
                'host' => 'lazarus',
                'path' => '/',
              },
              { 'root' => '/home/spin/rdiff-backup',
                'host' => 'lazarus',
                'path' => '/home',
              },
	      { 'root' => '/mnt/backup2/rdiff-backup',
		'host' => 'spidermonk',
		'path' => '/',
	      },
	      { 'root' => '/mnt/backup2/rdiff-backup',
		'host' => 'spidermonk',
		'path' => '/var',
	      },
	      { 'root' => '/mnt/backup2/rdiff-backup',
		'host' => 'spidermonk',
		'path' => '/home',
	      },
	      { 'root' => '/mnt/backup2/rdiff-backup',
		'host' => 'spidermonk',
		'path' => '/boot',
	      },
              { 'root' => '/mnt/backup2/rdiff-backup',
                'host' => 'spidermonk',
                'path' => '/media/winxp',
              },
	      { 'root' => '/home/spin/rdiff-backup',
		'host' => 'oldben',
		'path' => '/',
		'compress' => 1,
	      },
	      { 'root' => '/home/spin/rdiff-backup',
		'host' => 'oldben',
		'path' => '/var',
		'compress' => 1,
	      },
	      { 'root' => '/home/spin/rdiff-backup',
		'host' => 'oldben',
		'path' => '/boot',
		'compress' => 1,
	      },
	      { 'root' => '/home/spin/rdiff-backup',
		'host' => 'oldben',
		'path' => '/etc',
		'compress' => 1,
	      },
	      { 'root' => '/home/spin/rdiff-backup',
		'host' => 'oldben',
		'path' => '/home',
		'compress' => 1,
	      },
            );

logentry::OpenLog('local5','rdiff-backup-runner');
logentry('info','starting');

foreach my $bh (sort backup_sort (@BACKUPS)) {
  my @EXCLUDES;
  my $host=(defined $$bh{host} ? $$bh{host} : $LOCALHOST);
  my $path=(defined $$bh{path} ? $$bh{path} : '/');
  my $sshcompress=(defined $$bh{compress} ? $$bh{compress} : 0);
  my $dest;
  my $tag;
  if(defined $$bh{dest}) {
    $dest=$$bh{dest};
    $tag=$dest;
  } else {
    $dest=$path;
    $dest =~ s/\//\-/g;
    $dest eq '-' and $dest='-root';
    $tag=$host.$dest;
  }

  $dest=(defined $$bh{root} ? $$bh{root} : $BACKUP_ROOT).'/'.$tag;
  if(defined $PATH and $path !~ /$PATH/) {
    next;
  }
  if(defined $HOST and $host !~ /$HOST/) {
    next;
  }

  logentry('info',"$host $path $tag $dest");

  my @com;

  if(defined $AVERAGE) {
    my $c="rdiff-backup --calculate-average $dest/rdiff-backup-data/session_statistics.*.data";
    logentry('debug',$c);
    my @res=`$c`;
    #print @res;
    foreach my $ln (@res) {
      chomp $ln;
      $ln =~ /IncrementFiles\s+(.+?)$/ and $IFILES+=int($1);
      $ln =~ /IncrementFileSize\s+(.+?)\s+/ and $IFILESIZE+=($1/1024/1024);
      $ln =~ /TotalDestinationSizeChange\s+(.+?)\s+/ and $DESTSIZECHANGE+=($1/1024/1024);
    }
    next;
  }

  if(defined $REMOVE or $LISTOLDEST) {
    my $c="rdiff-backup -l --parsable-output ";
    $c.=$dest;
    logentry('debug',$c);
    my @res=`$c`;
    @res == 1 and next; # if there is only one increment, don't consider it for removal
    foreach my $ln (@res) {
      chomp $ln;
      $ln =~ /^(\d+)\sdirectory$/ or next;
      if(exists $INCREMENTS{$1}) {
        warn "conflict: $1 $tag $dest";
      }
      $INCREMENTS{$1}=[$dest,$tag];
    }
    next;
  }

  @com=($RDIFF_BACKUP,
	'--verbosity',$VERBOSITY,
	'--terminal-verbosity',$TVERBOSITY,
	'--exclude-special-files',
	'--exclude-other-filesystems',
       );
  $sshcompress or push(@com,'--ssh-no-compression');
  $VERBOSE and push(@com,'--print-statistics');


  if($path =~ /(home|home\/acox)$/) {
    #push(@com,'--exclude-globbing-filelist',
    #     $EXCLUDE_PATH.'/exclude-generic-home');
    push(@EXCLUDES,$EXCLUDE_PATH.'/exclude-generic-home');
  }
  push(@EXCLUDES,
       $EXCLUDE_PATH.'/exclude-'.$tag);
  #push(@com,'--exclude-globbing-filelist',
  #     $EXCLUDE_PATH.'/exclude-'.$tag);

  if($COMPARE) {
    push(@com,'--compare');
  }

  my $TMPDIR;
  my ($EXH, $EXF);
  my $VGDEV;
  if($host eq $LOCALHOST and defined $$bh{lvdev}) {
    my $scom='';
    $TMPDIR = mkdtemp( '/mnt/rdrXXXXXX' );
    print $TMPDIR."\n";
    $VGDEV=$$bh{lvdev};
    $VGDEV =~ s/\/[a-zA-Z0-9_\-]+$//;
    unless($TEST) {
      $scom="lvcreate -s -L $SNAPSIZE -n rdr $$bh{lvdev} $SNAPPV";
      logentry('info',$scom);
      system($scom);
      unless($? == 0) {
	logentry('crit',
		 "unable to create snapshot for $$bh{lvdev} with size $SNAPSIZE".
		 (defined $SNAPPV and length $SNAPPV > 0 ? " on $SNAPPV" : ''));
	next;
      }
      $scom="mount -o ro $VGDEV/rdr $TMPDIR";
      logentry('info',$scom);
      system($scom);
      unless($? == 0) {
	logentry('crit',
		 "unable to mount -o ro $VGDEV/rdr $TMPDIR");
	$scom="lvremove -f $VGDEV/rdr";
	logentry('info',$scom);
	unless($? == 0) {
	  logentry('crit',
		   "unable to remove lv snapshot $VGDEV/rdr");
	}
	next;
      }
    }
    ($EXH,$EXF) = mkstemp( "/tmp/tmpfilerdrXXXXX" );
    foreach my $f (@EXCLUDES) {
      unless(open(IF,$f)) {
	logentry('warn',"unabled to open $f");
	next;
      }
      while(<IF>) {
	s/$path/$TMPDIR/;
	print $EXH $_;
      }
    }
    close $EXH;
    push(@com,'--exclude-globbing-filelist',
	 $EXF);

    push(@com,$TMPDIR,$dest);
  } else {
    foreach my $f (@EXCLUDES) {
      push(@com,'--exclude-globbing-filelist',
	   $f);
    }
    push(@com,($host eq $LOCALHOST ? $path : $host.'::'.$path),$dest);
  }
  logentry('info',join(" ",@com));

  unless($TEST) {
    if($host ne $LOCALHOST) {
      system("/usr/sbin/fping -q $host");
      unless($? == 0) {
        logentry('warning',"fping failed to ping $host");
        next;
      }
    }
    if(defined $$bh{prerun}) {
      print $$bh{prerun}."\n";
      system($$bh{prerun});
      unless($? == 0) {
        logentry('err',"unable to execute prerun command: skipping backup!");
        next;
      }
    }
    system(@com);
    my $mainret=$?;
    unless($mainret == 0) {
      logentry('err',"unable to execute rdiff-backup!");
    }
    if(defined $$bh{postrun}) {
      print $$bh{postrun}."\n";
      system($$bh{postrun});
      unless($? == 0) {
        logentry('err',"unable to execute postrun command");
      }
    }
    if($host eq $LOCALHOST and defined $$bh{lvdev}) {
      my $scom="umount $TMPDIR";
      logentry('info',$scom);
      system($scom);
      unless($? == 0) {
	logentry('err',"unable to umount $TMPDIR");
      } else {
	$scom="lvremove -f $VGDEV/rdr";
	logentry('info',$scom);
	system($scom);
	unless($? == 0) {
	  logentry('err',"unable to lvremove $VGDEV/rdr");
	}
      }
      if( defined $TMPDIR and -d $TMPDIR ) {
	rmdir($TMPDIR);
      }
    }
    if( defined $EXF and -f $EXF ) {
      unlink($EXF);
    }
  }
}

if(defined $AVERAGE) {
  printf("IncrementFiles: %d\nIncrementFileSize: %.2f MiB\nTotalDestinationSizeChange: %.2f MiB\n",
	 $IFILES,$IFILESIZE,
	 $DESTSIZECHANGE);
}

if(defined $REMOVE) {
  foreach my $t (sort { $a <=> $b } (keys(%INCREMENTS))) {
    logentry('debug',"$t $INCREMENTS{$t}[0] $INCREMENTS{$t}[1]");
    my @com=($RDIFF_BACKUP,
	     '--verbosity',$VERBOSITY,
	     '--terminal-verbosity',$TVERBOSITY,
	     '--remove-older-than',($t+1),
	     $INCREMENTS{$t}[0]);
    logentry('info',join(" ",@com));
    unless($TEST) {
      system(@com);
      unless($? == 0) {
	logentry('err',"unable to execute rdiff-backup!");
      }
    }
    last;
  }
}

if($LISTOLDEST) {
  foreach my $t (sort { $a <=> $b } (keys(%INCREMENTS))) {
    logentry('info',localtime($t).' '.$INCREMENTS{$t}[0].' '.$INCREMENTS{$t}[1]);
  }
}

sub backup_sort {
  if((defined $$a{host} ? $$a{host} : $LOCALHOST) eq
     (defined $$b{host} ? $$b{host} : $LOCALHOST)) {
    return $$a{path} cmp $$b{path};
  } else {
    return (defined $$a{host} ? $$a{host} : $LOCALHOST) cmp
      (defined $$b{host} ? $$b{host} : $LOCALHOST);
  }
}
