#! /usr/bin/perl

use strict;
use warnings;
use v5.16;

use Backup::rdbduprunner qw(:all);
use Data::Dumper;
use Scalar::Util qw(reftype);

$APP_NAME='puppet-params';

merge_config_definition();

print STDERR Dumper \%config_definition;

for my $section (qw(global backupdestination backupset)) {
    print "---*** ${section} ***---\n";
    print join("\n",pparams($section)),"\n";
    print "---*** HASH ${section} ***---\n";
    print join("\n",hash_params($section)),"\n";
    print "---*** docstring ${section} ***---\n";
    print join("\n",docstrings($section)),"\n";
}

sub hash_params {
    my $section = shift;
    my @a = ( "\$_${section} = {" );
 FIELD:
    for my $field (sort(keys(%{$config_definition{$section}{fields}}))) {
        push(@a, "${field} => \$${field},");
    }
    push(@a, '}.filter |$k,$v| { $v =~ NotUndef }');
    return @a;
}
sub docstrings {
    my $section = shift;
    my @a;
 FIELD:
    for my $field (sort(keys(%{$config_definition{$section}{fields}}))) {
        push(@a, "# \@param ${field}",
             "#   sets parameter of the same name in ${section}",
             "#   see rdbduprunner docs for details");
    }
    return @a;
}

sub pparams {
    my $section = shift;
    my @a;

 FIELD:
    for my $field (sort(keys(%{$config_definition{$section}{fields}}))) {
        if ($section eq 'global'
            and ($field eq 'backupdestination'
                 or $field eq 'backupset' )) {
            push(@a,"Hash[String,Struct[{");
            push(@a,sparams($field));
            if ($field eq 'backupdestination') {
                push(@a,
                     "export => Optional[Boolean],",
                     "tag => Optional[String],",);
            }
            push(@a,"}]] \$${field},");
            next FIELD;
        }
        my $pt = xlate($config_definition{$section}{fields}{$field}{'type'});
        if($field =~ m{binary}) {
            $pt = 'Stdlib::UnixPath';
        }
        my $default = ',';
        if ( defined $config_definition{$section}{fields}{$field}{'optional'}
             and $config_definition{$section}{fields}{$field}{'optional'} eq 'true' ) {
            $pt = "Optional[${pt}]";
            # $default = $pt =~ /Array/
            #     ? ' = [],'
            #     : ' = undef,';
            $default = ' = undef,';
        }
        push(@a,sprintf("%s \$%s",$pt,$field.$default));
    }
    #print STDERR Dumper \@a;
    return @a
}

sub sparams {
    my $section = shift;
    my @a;
 FIELD:
    for my $field (sort(keys(%{$config_definition{$section}{fields}}))) {
        my $pt = xlate($config_definition{$section}{fields}{$field}{'type'});
        if ( defined $config_definition{$section}{fields}{$field}{'optional'}
             and $config_definition{$section}{fields}{$field}{'optional'} eq 'true' ) {
            $pt = "Optional[${pt}]";
        }
        push(@a,sprintf("%s => %s",$field,$pt));
    }
    #print STDERR Dumper \@a;
    return @a
}



sub xlate {
    my $type = shift;
    my $puppet_type;
    $puppet_type =
        $type eq 'valid(truefalse)'
        ? 'Boolean'
        : $type eq 'string'
        ? 'String'
        : $type eq 'integer'
        ? 'Integer'
        : $type eq 'list?(string)'
        ? 'Variant[String,Array[String]]'
        : (ref $type and (reftype($type) eq reftype([]) ) and $$type[0] eq 'hostname')
        ? 'Stdlib::Host'
        : $type;
    return $puppet_type;
}

      
